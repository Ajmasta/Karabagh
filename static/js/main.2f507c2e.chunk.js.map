{"version":3,"sources":["images/armeniaHeart.png","images/map1.png","images/monastery.jpg","images/RegionalMap.png","logo.svg","components/navBar.js","components/infoPanel.js","components/coverPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","setPageView","AppBar","position","Toolbar","className","Grid","xs","container","id","src","logo","alt","alignContent","onClick","InfoPanel","image","imageAlt","text","direction","sm","justifyContent","CoverPanel","button","Button","color","link","App","url","window","location","pathname","useState","pageView","console","log","wrap","monastery","RegionalMap","map1","pageToDisplay","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f507c2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/armeniaHeart.b31a9946.png\";","module.exports = __webpack_public_path__ + \"static/media/map1.12a99a32.png\";","module.exports = __webpack_public_path__ + \"static/media/monastery.8226e90d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/RegionalMap.6401acae.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport logo from \"../images/armeniaHeart.png\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nconst NavBar = ({ setPageView }) => {\r\n  const screenTooSmall = false; //useMediaQuery(\"(max-width:600px)\");\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Toolbar className=\"navBar\">\r\n        <Grid xs=\"1\" container=\"true\" id=\"logo\">\r\n          <img src={logo} alt=\"armenian Flag\" />\r\n        </Grid>\r\n        {screenTooSmall ? (\r\n          \"\"\r\n        ) : (\r\n          <Grid xs=\"11\" id=\"navBarLinks\" container=\"true\" alignContent=\"center\">\r\n            <p onClick={() => setPageView(\"home\")}>Conflict </p>{\" \"}\r\n            <p onClick={() => setPageView(\"history\")}> History </p>{\" \"}\r\n            <p onClick={() => setPageView(\"help\")}> How to Help</p>{\" \"}\r\n          </Grid>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nconst InfoPanel = ({ image, imageAlt, text }) => {\r\n  return (\r\n    <Grid\r\n      container=\"true\"\r\n      direction=\"row\"\r\n      className=\"infoPanel\"\r\n      alignContent=\"center\"\r\n    >\r\n      <Grid xs=\"11\" sm=\"4\" className=\"infoPanelText\" justifyContent=\"center\">\r\n        <div> {text}</div>\r\n      </Grid>\r\n      <Grid xs=\"11\" sm=\"6\" className=\"infoPanelImage\">\r\n        <img src={image} alt={imageAlt}></img>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default InfoPanel;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst CoverPanel = ({ id, text, button, setPageView }) => {\r\n  return (\r\n    <Grid\r\n      xs=\"12\"\r\n      container=\"true\"\r\n      direction=\"row\"\r\n      className=\"coverPanel\"\r\n      alignContent=\"center\"\r\n      id={`coverPanel${id}`}\r\n      justifyContent=\"center\"\r\n    >\r\n      <p className=\"coverPanelText\" id={`coverPanelText${id}`}>\r\n        {text}\r\n      </p>\r\n      <Button color=\"inherit\" onClick={() => setPageView(button.link)}>\r\n        {\" \"}\r\n        {button.text}{\" \"}\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CoverPanel;\r\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams,\n} from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport NavBar from \"./components/navBar.js\";\nimport InfoPanel from \"./components/infoPanel.js\";\nimport CoverPanel from \"./components/coverPanel.js\";\n\nimport logo from \"./logo.svg\";\nimport map1 from \"./images/map1.png\";\nimport monastery from \"./images/monastery.jpg\";\nimport RegionalMap from \"./images/RegionalMap.png\";\nimport \"./App.css\";\n// import GRID\nfunction App() {\n  const text = `Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության համար նախատեսված մոդելային տեքստ է: Սկսած 1500-ակ Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության հա Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության հա Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության հա Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության հա Lorem Ipsum-ը տպագրության և տպագրական արդյունաբերության հա`;\n  const url = window.location.pathname;\n  const [pageView, setPageView] = useState(\"home\");\n  console.log(pageView);\n  const pageToDisplay = (pageView) => {\n    switch (pageView) {\n      case \"home\":\n        return (\n          <>\n            <CoverPanel\n              setPageView={setPageView}\n              id=\"1\"\n              text={\n                \"On the 27th of September, Azerbaijan declared war on Armenia to invade Nagorno-Karabagh\"\n              }\n              button={{ text: \"Help\", link: \"help\" }}\n            />\n\n            <CoverPanel\n              setPageView={setPageView}\n              id=\"2\"\n              text={\n                \"The conflict has already claimed 903 lives. This year alone, 307 people have died. \"\n              }\n              button={{ text: \"Read More\", link: \"history\" }}\n            />\n\n            <CoverPanel\n              setPageView={setPageView}\n              id=\"1\"\n              text={\n                \"We urge world leaders to put pressure on Azerbaijan, Turkey, and Armenia to negotiate peacefully\"\n              }\n              button={{ text: \"Help\", link: \"help\" }}\n            />\n          </>\n        );\n\n      case \"history\":\n        return (\n          <>\n            <InfoPanel\n              image={monastery}\n              imageAlt={\"logo\"}\n              text={`this is ${url}`}\n            />\n\n            <InfoPanel image={RegionalMap} imageAlt={\"logo\"} text={text} />\n\n            <InfoPanel image={map1} imageAlt={\"logo\"} text={text} />\n          </>\n        );\n\n      case \"help\":\n        return <p> help</p>;\n\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <Grid className=\"App\" container=\"true\" direction=\"column\" wrap=\"nowrap\">\n      <NavBar setPageView={setPageView} />\n      {pageToDisplay(pageView)}\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}